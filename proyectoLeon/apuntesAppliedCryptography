//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Applied Cryptography, Second Edition: Protocols, Algorthms, and Source
Code in C (cloth)
(Publisher: John Wiley & Sons, Inc.)
Author(s): Bruce Schneier
ISBN: 0471128457
Publication Date: 01/01/96


//
A message is plaintext (sometimes called cleartext). The process of disguising a message in such a way as to hide its substance is encryption. An encrypted message is ciphertext. The process of turning ciphertext back into plaintext is decryption. This is all shown in Figure 1.1.

(If you want to follow the ISO 7498-2 standard, use the terms “encipher” and “decipher.” It seems that some cultures find the terms “encrypt” and “decrypt” offensive, as they refer to dead bodies.)

The art and science of keeping messages secure is cryptography, and it is practiced by cryptographers. Cryptanalysts are practitioners of cryptanalysis, the art and science of breaking ciphertext; that is, seeing through the disguise. The branch of mathematics encompassing both cryptography and cryptanalysis is cryptology and its practitioners are cryptologists. Modern cryptologists are generally trained in theoretical
mathematics—they have to be.


Plaintext is denoted by M, for message, or P, for plaintext. It can be a stream of bits, a text file, a bitmap, a stream of digitized voice, a digital video image...whatever. As far as a computer is concerned, M is simply binary data. (After this chapter, this book concerns itself with binary data and computer cryptography.) The plaintext can be intended for either transmission or storage. In any case, M is the message to be encrypted.

Ciphertext is denoted by C. It is also binary data: sometimes the same size as M, sometimes larger. (By combining encryption with compression, C may be
smaller than M. However, encryption does not accomplish this.) The encryption function E, operates on M to produce C. Or, in mathematical notation:

E(M) = C

In the reverse process, the decryption function D operates on C to produce M:

D(C) = M

Since the whole point of encrypting and then decrypting a message is to recover the original plaintext, the following identity must hold true:

D(E(M)) = M



//
In addition to providing confidentiality, cryptography is often asked to do other jobs:

— Authentication. It should be possible for the receiver of a message to ascertain its origin; an intruder should not be able to masquerade as someone else.

— Integrity. It should be possible for the receiver of a message to verify that it has not been modified in transit; an intruder should not be able to substitute a false message for a legitimate one.

— Nonrepudiation. A sender should not be able to falsely deny later that he sent a message.



//
A cryptographic algorithm, also called a cipher, is the mathematical function used for encryption and decryption.


//
If the security of an algorithm is based on keeping the way that algorithmworks a secret, it is a restricted algorithm. Restricted algorithms have historical interest, but are woefully inadequate by today’s standards. A large or changing group of users cannot use them, because every time a user leaves the group everyone else must switch to a different algorithm. If someone accidentally reveals the secret, everyone must change their algorithm.


//
Despite these major drawbacks, restricted algorithms are enormously popular for low-security applications. Users either don’t realize or don’t care about the security problems inherent in their system.

//
Modern cryptography solves this problem with a key, denoted by K. This key might be any one of a large number of values. The range of possible values of the key is called the keyspace. Both the encryption and decryption operations use this key (i.e., they are dependent on the key and this fact is denoted by the k subscript), so the functions now become:

E K (M) = C

D K (C) = M

Those functions have the property that (see Figure 1.2):

D K (E K (M)) = M

Some algorithms use a different encryption key and decryption key (see Figure 1.3). That is, the encryption key, K 1 , is different from the corresponding decryption key, K 2 . In this case:

E K1 (M) = C

D K2 (C) = M

D K2 (E K 1 (M)) = M

All of the security in these algorithms is based in the key (or keys); none is based in the details of the algorithm. This means that the algorithm can be published and analyzed. Products using the algorithm can be mass-produced. It doesn’t matter if an eavesdropper knows your algorithm; if she doesn’t know your particular key, she can’t read your messages.


//
A cryptosystem is an algorithm, plus all possible plaintexts, ciphertexts, and keys.




//
Symmetric Algorithms

There are two general types of key-based algorithms: symmetric and public-key. Symmetric algorithms, sometimes called conventional algorithms, are algorithms where the encryption key can be calculated from the decryption key and vice versa. In most symmetric algorithms, the encryption key and the decryption key are the same. These algorithms, also called secret-key algorithms, single-key algorithms, or one-key algorithms, require that the sender and receiver agree on a key before they can communicate securely. The security of a symmetric algorithm rests in the key; divulging the key means that anyone could encrypt and decrypt messages. As long as the communication needs to remain secret, the key must remain secret. Encryption and decryption with a symmetric algorithm are denoted by:

E K (M) = C

D K (C) = M


Symmetric algorithms can be divided into two categories. Some operate on the plaintext a single bit (or sometimes byte) at a time; these are called stream algorithms or stream ciphers. Others operate on the plaintext in groups of bits. The groups of bits are called blocks, and the algorithms are called block algorithms or block ciphers. For modern computer algorithms, a typical block size is 64 bits—large enough to preclude analysis and small enough to be workable. (Before computers, algorithms generally operated on plaintext one character at a time. You can think of this as a stream algorithm operating on a stream of characters.)


//
Public-Key Algorithms

Public-key algorithms (also called asymmetric algorithms) are designed so that the key used for encryption is different from the key used for decryption.
Furthermore, the decryption key cannot (at least in any reasonable amount of time) be calculated from the encryption key. The algorithms are called “public-key” because the encryption key can be made public: A complete stranger can use the encryption key to encrypt a message, but only a specific person with the corresponding decryption key can decrypt the message. In these systems, the encryption key is often called the public key, and the decryption key is often called the private key. The private key is sometimes also called the secret key, but to avoid confusion with symmetric algorithms, that tag won’t be used here. 

Encryption using public key K is denoted by:
E K (M) = C

Even though the public key and private key are different, decryption with the corresponding private key is denoted by:

D K (C) = M

Sometimes, messages will be encrypted with the private key and decrypted with the public key; this is used in digital signatures (see Section 2.6). Despite the possible confusion, these operations are denoted by, respectively:

E K (M) = C

D K (C) = M




//
The whole point of cryptography is to keep the plaintext (or the key, or both) secret from eavesdroppers (also called adversaries, attackers, interceptors, interlopers, intruders, opponents, or simply the enemy). Eavesdroppers are assumed to have complete access to the communications between the sender and receiver. Cryptanalysis is the science of recovering the plaintext of a message without access to the key. Successful cryptanalysis may recover the plaintext or the key. It also may find weaknesses in a cryptosystem that eventually lead to the previous results. (The loss of a key through noncryptanalytic means is called a compromise.) An attempted cryptanalysis is called an attack. A fundamental assumption in cryptanalysis, first enunciated by the Dutchman A. Kerckhoffs in the nineteenth century, is that the secrecy must reside entirely in the key [794]. Kerckhoffs assumes that the cryptanalyst has complete details of the cryptographic algorithm and implementation. (Of course, one would assume that the CIA does not make a habit of telling Mossad about its cryptographic algorithms, but Mossad probably finds out anyway.) While real-world cryptanalysts don’t always have such detailed information, it’s a good assumption to make. If others can’t break an algorithm, even with knowledge of how it works, then they certainly won’t be able to break it without that knowledge. There are four general types of cryptanalytic attacks. Of course, each of them assumes that the cryptanalyst has complete knowledge of the encryption algorithm used:

- Ciphertext-only attack.

- Known-plaintext attack
 
- Chosen-plaintext attack
 
- Adaptive-chosen-plaintext attack
 
- Chosen-ciphertext attack
 
- Chosen-key attack.
 
- Rubber-hose cryptanalysis



//
And don’t forget Kerckhoffs’s assumption: If the strength of your new cryptosystem relies on the fact that the attacker does not know the algorithm’s inner workings, you’re sunk. If you believe that keeping the algorithm’s insides secret improves the security of your cryptosystem more than letting the academic community analyze it, you’re wrong. And if you think that someone won’t disassemble your code and reverse-engineer your algorithm, you’re naïve. (In 1994 this happened with the RC4 algorithm—see Section 17.1.) The best algorithms we have are the ones that have been made public, have been attacked by the world’s best cryptographers for years, and are still unbreakable.


//
Security of Algorithms


Lars Knudsen classified these different categories of breaking an algorithm. Indecreasing order of severity [858]:

1. Total break. A cryptanalyst finds the key, K, such that D K (C) = P.

2. Global deduction. A cryptanalyst finds an alternate algorithm, A, equivalent to D K (C), without knowing K.

3. Instance (or local) deduction. A cryptanalyst finds the plaintext of an intercepted ciphertext.

4. Information deduction. A cryptanalyst gains some information about the key or plaintext. This information could be a few bits of the key, some information about the form of the plaintext, and so forth.


An algorithm is unconditionally secure if, no matter how much ciphertext a cryptanalyst has, there is not enough information to recover the plaintext. In point of fact, only a one-time pad (cuando se agarran las letras y se ponen en un papel en desorden y se usa esto como algoritmo de cifrado por ej tomar el plaintext y one-time pad y hacerle addition modulo 26 para cifrar.)
EJ DE ONE TIME PAD

ONETIMEPAD plaintext
TBFRGFARFM sequence from de pad
IPKLPSFHGQ resultado

ya que 

O + T mod 26 = I
N + B mod 26 = P
E + F mod 26 = K




(see Section 1.5) is unbreakable given infinite resources. All other cryptosystems are breakable in a ciphertext-only attack, simply by trying every possible key one by one and checking whether the resulting plaintext is meaningful. This is called a brute-force attack (see Section 7.1).




//
You can measure the complexity (see Section 11.1) of an attack in different
ways:

1. Data complexity. The amount of data needed as input to the attack.

2. Processing complexity. The time needed to perform the attack. This is often called the work factor.

3. Storage requirements. The amount of memory needed to do the attack.

As a rule of thumb, the complexity of an attack is taken to be the minimum of these three factors. Some attacks involve trading off the three complexities: A faster attack might be possible at the expense of a greater storage requirement. Complexities are expressed as orders of magnitude. If an algorithm has a processing complexity of 2 128 , then 2 128 operations are required to break the algorithm. (These operations may be complex and time-consuming.) Still, if you assume that you have enough computing speed to perform a million operations every second and you set a million parallel processors against the task, it will still take over 10 19 years to recover the key. That’s a billion times the age of the universe.

While the complexity of an attack is constant (until some cryptanalyst finds a better attack, of course)!!!!!!!!!!!!!!!!!!!



// 
Antes de la era de la computación los algoritmos de criptografía estaban basados en caracteres, donde los mismos eran sustituidos 
o traspuestos por otros caracteres. Estos conceptos son llamados cifrados de sustitución o de transposición y continuan siendo la base de la
criptografía pero por ejemplo se pasa de los 26 caracteres del alfabeto a los 2 símbolos del sistema binario.


\subsubsection{Cifrado de sustitución}
Como se explicó anteriormente este tipo de cifrado se basa en tomar un caracter del texto plano y sustituirlo por otro caracter.
Para descrifrar el texto cifrado simplemente se sustituyen de vuelta los caracteres y listo.

Según \cite{} en al criptografía clásica existen 4 tipos de cifrado por sustitución:
\begin{itemize}
\item Cifrado de sustitución simple: Una sustitución de uno a uno entre cada caracter del texto plano y el texto cifrado.
Ejemplos de este tipo de sustitución son el famoso cifrado de César y el ROT13 utilizado en UNIX.

\item Cifrado de sustitución homofónico: Una sustición de uno a muchos. Un caracter del texto plano, por ejemplo A, puede ser sustituido
por varios caracteres en el texto crifado, por ejemplo "5", "13", "43".

\item Cifrado de sustitución de poligrama: Una sustitucióin por bloques en donde se toma un bloque de caracteres del texto plano y
se sustituye por su bloque equivalente en el texto cifrado. Por ejemplo si en el texto plano se tiene "ABC" se sustituye por "SLL"
en el texto cifrado.

\item Cifrado de sustitución polialfabético: ????? 
\end{itemize}

\subsubsection{Cifrado de transposición}
En este tipo de algoritmos de cifrado el texto plano se convierte en texto cifrado cuando el orden de los caracteres es
cambiado bajo alguna norma.


Finalmente existen otros tipos de algoritmos en la criptografía clásica como lo son el XOR o One-time pads.


//
1.6 Computer Algorithms
There are many cryptographic algorithms. These are three of the most common:

— DES (Data Encryption Standard) is the most popular computer encryption algorithm. DES is a U.S. and international standard. It is a
symmetric algorithm; the same key is used for encryption and decryption.

— RSA (named for its creators—Rivest, Shamir, and Adleman) is the most popular public-key algorithm. It can be used for both encryption
and digital signatures.

— DSA (Digital Signature Algorithm, used as part of the Digital Signature Standard) is another public-key algorithm. It cannot be used
for encryption, but only for digital signatures.




//////////////////////////////////////////////////////////////
Chapter 2
Protocol Building Blocks

//
2.1 Introduction to Protocols 

A protocol is a series of steps, involving two or more parties, designed to accomplish a task



Protocols have other characteristics as well:

— Everyone involved in the protocol must know the protocol and all of the steps to follow in advance.
— Everyone involved in the protocol must agree to follow it.
— The protocol must be unambiguous; each step must be well defined and there must be no chance of a misunderstanding.
— The protocol must be complete; there must be a specified action for every possible situation.


Un protoloco criptográfico es un protocolo que utiliza criptografía e implementado un algoritmo de cifrado. El objetivo de utilizar
criptografía en un protocolo es prevenir que se viole la seguridad y privacidad así como detectar cuando esto ocurre.


// MUY IMPORTANTE MENCIONAR EN EL MARCO TEORICO VIENE A ACLARAR PORQUE LA IMPORTANCIA DE LA CRIPTOGRAFIA
 ASI COMO EL PORQUÉ DE LA CRIPTOGRAFIA DE LLAVE PÚBLICA.

Many face-to-face protocols rely on people’s presence to ensure fairness and
security. Would you send a stranger a pile of cash to buy groceries for you?
Would you play poker with someone if you couldn’t see him shuffle and deal?
Would you mail the government your secret ballot without some assurance of
anonymity?
It is naïve to assume that people on computer networks are honest. It is naïve
to assume that the managers of computer networks are honest. It is even naïve
to assume that the designers of computer networks are honest. Most are, but
the dishonest few can do a lot of damage. By formalizing protocols, we can
examine ways in which dishonest parties can subvert them. Then we can
develop protocols that are immune to that subversion.





//
In summary, symmetric cryptosystems have the following problems:
— Keys must be distributed in secret. They are as valuable as all the
messages they encrypt, since knowledge of the key gives knowledge of
all the messages. For encryption systems that span the world, this can be
a daunting task. Often couriers hand-carry keys to their destinations.
— If a key is compromised (stolen, guessed, extorted, bribed, etc.), then
Eve can decrypt all message traffic encrypted with that key. She can
also pretend to be one of the parties and produce false messages to fool
the other party.
— Assuming a separate key is used for each pair of users in a network,
the total number of keys increases rapidly as the number of users
increases. A network of n users requires n(n - 1)/2 keys. For example,
10 users require 45 different keys to talk with one another and 100 users
require 4950 keys. This problem can be minimized by keeping the
number of users small, but that is not always possible.




//
2.3 One way functions 

One-way functions are relatively easy to compute, but significantly harder to
reverse. That is, given x it is easy to compute f(x), but given f(x) it is hard to
compute x


A trapdoor one-way function is a special type of one-way function, one with
a secret trapdoor 

it is easy to compute f(x) given x, and hard to compute x given f(x). However, there is some secret information, y,
such that given f(x) and y it is easy to compute x.

//
PREGUNTARLE AL PROFE SOBRE 2.4 ONE WAY HASH FUNCTION PORQUE NO ENTENDI

importante saber q el MAC tambien conocido como DAC es un one way function


//
BUENA ANALOGIA DE QUE ES UN ALGORITMO SIMETRICO

Think of a symmetric algorithm as a safe. The key is the combination.
Someone with the combination can open the safe, put a document inside, and
close it again. Someone else with the combination can open the safe and take
the document out. Anyone without the combination is forced to learn
safecracking.


// BUENA ANALOGIA PARA UN ALGORITMO DE LLAVE PUBLICA

It is as if
someone turned the cryptographic safe into a mailbox. Putting mail in the
mailbox is analogous to encrypting with the public key; anyone can do it. Just
open the slot and drop it in. Getting mail out of a mailbox is analogous to
decrypting with the private key. Generally it’s hard; you need welding torches.
However, if you have the secret (the physical key to the mailbox), it’s easy to
get mail out of a mailbox.
Mathematically, the process is based on the trap-door one-way functions
previously discussed.

//
PAra cuestiones de redes no se debe confiar en nadie


//
El objetivo de utilizar cifrado de llave pública se basa en:

 - Receptor y emisor acuerdan un sistema de cifrado.
 - El receptor entrega al emisor su llave pública.
 - El emisor cifra el texto plano haciendo uso de la llave pública entregada y el sistema acordado.
 - El emisor envía el texto cifrado.
 - El receptor descrifa el texto cifrado haciendo uso de la llave privada.


De esta manera no hay forma que fisgones logren descrifrar el mensaje aunque obtengan la llave pública, así el receptor
se asegura que las comunicaciones van a ser mucho más seguras ya que el emisor deja de tener la llave para descifrar y así no puede
brindarse a nadie o que sea robada a este.

Before, Alice and Bob had to agree on a key in
secret. Alice could choose one at random, but she still had to get it to Bob. She
could hand it to him sometime beforehand, but that requires foresight. She
could send it to him by secure courier, but that takes time

More commonly, a network of users agrees on a public-key cryptosystem.
Every user has his or her own public key and private key, and the public keys
are all published in a database somewhere. Now the protocol is even easier:
(1) Alice gets Bob’s public key from the database.
(2) Alice encrypts her message using Bob’s public key and sends it to
Bob.
(3) Bob then decrypts Alice’s message using his private key.



// Hybrid cryptosystems
In the real world, public-key algorithms are not a substitute for symmetric
algorithms. They are not used to encrypt messages; they are used to encrypt
keys. There are two reasons for this:
1. Public-key algorithms are slow. Symmetric algorithms are generally
at least 1000 times faster than public-key algorithms. Yes, computers
are getting faster and faster, and in 15 years computers will be able to do
public-key cryptography at speeds comparable to symmetric
cryptography today. But bandwidth requirements are also increasing,
and there will always be the need to encrypt data faster than public-key
cryptography can manage.
2. Public-key cryptosystems are vulnerable to chosen-plaintext attacks.
If C = E(P), when P is one plaintext out of a set of n possible plaintexts,
then a cryptanalyst only has to encrypt all n possible plaintexts and
compare the results with C (remember, the encryption key is public). He
won’t be able to recover the decryption key this way, but he will be able
to determine P.


In most practical implementations public-key cryptography is used to secure
and distribute session keys; those session keys are used with symmetric
algorithms to secure message traffic [879]. This is sometimes called a hybrid
cryptosystem.
(1) Bob sends Alice his public key.
(2) Alice generates a random session key, K, encrypts it using Bob’s
public key, and sends it to Bob.
EB(K)
(3) Bob decrypts Alice’s message using his private key to recover the
session key.
DB(EB(K)) = K
(4) Both of them encrypt their communications using the same session
key.
Using public-key cryptography for key distribution solves a very important
key-management problem. With symmetric cryptography, the data encryption
key sits around until it is used. If Eve ever gets her hands on it, she can decrypt
messages encrypted with it. With the previous protocol, the session key is
created when it is needed to encrypt communications and destroyed when it is
no longer needed. This drastically reduces the risk of compromising the
session key. Of course, the private key is vulnerable to compromise, but it is at
less risk because it is only used once per communication to encrypt a session
key. This is further discussed in Section 3.1.






//
Merkle’s Puzzles
Ralph Merkle invented the first construction of public-key cryptography. In
1974



//
Digital Signatures

Comprueban autoría de una personaje sobre un texto plano ya que la firma es autentica, no reusable, no repudiable e infalsificable.
Además el documento firmado es inalterable. Esto no necesariamente se cumple siempre, aún menos para una computadora donde los archivos
son fáciles de copiar y alterar sin que nadie se dé cuenta. Debido a esto se hace uso de critpografía para asegurar las características
antes mencionadas.

En el caso de los criptosistemas simétricos según (cita) se tiene el siguiente protocolo:

Se tiene un árbitro para tramitar mensajes entre el emisor y el receptor, el cual brinda una llave a ambos la cual ya ha sido
previamente establecida antes de iniciar el protocolo. Ahora:

- El emisor cifra el texto plano con la llave dada por el árbitro y se la envía a este.
- El árbitro toma el texto cifrado, lo descifra, le agrega una autenticación de que recibió el texto plano del emisor y vuelve
a cifrarlo pero utilizando la llave dada al receptor.
- El receptor descrifra el texto enviado por el árbitro en donde puede leer la autenticación del árbitro.


Note como el protocolo cumple con todas las características antes mencionadas pero aún más importante es destacar como el árbitro
invierte su tiempo en las transacciones, además de que toma el papel de cuello de botella si se tuvieran comunicaciones múltiples
y finalmente lo díficil que es crear y mantener a una entidad de este tipo. Por estos motivos es que esto solo funciona a nivel teórico
y no a nivel práctico.








/////////////////////////////////////////////////////////////////////////////////////////
Chapter 3
Basic Protocols

// 3.1 Key Exchange

A common cryptographic technique is to encrypt each individual conversation
with a separate key. This is called a session key, because it is used for only one
particular communications session. As discussed in Section 8.5, session keys
are useful because they only exist for the duration of the communication. How
this common session key gets into the hands of the conversants can be a
complicated matter.








//
Multiple-Key Public-Key Cryptography
Public-key cryptography uses two keys. A message encrypted with one key
can be decrypted with the other. Usually one key is private and the other is
public. However, let’s assume that Alice has one key and Bob has the other.
Now Alice can encrypt a message so that only Bob can decrypt it, and Bob can
encrypt a message so that only Alice can read it.
This concept was generalized by Colin Boyd [217]. Imagine a variant of
public-key cryptography with three keys: K A , K B , and K C , distributed as
shown in Table 3.2.
Alice can encrypt a message with K A so that Ellen, with K B and K C , can
decrypt it. So can Bob and Carol in collusion. Bob can encrypt a message so
that Frank can read it, and Carol can encrypt a message so that Dave can read
it. Dave can encrypt a message with K A so that Ellen can read it, with K B so
that Frank can read it, or with both K A and K B so that Carol can read it.
Similarly, Ellen can encrypt a message so that either Alice, Dave, or Frank can
read it. All the possible combinations are summarized in Table 3.3; there are
no other ones.



3.6 Secret Splitting

here are ways to take a message and divide it
up into pieces [551]. Each piece by itself means nothing, but put them together
and the message appears. If the message is the recipe and each employee has apiece, then only together can they make the sauce. If any employee resigns
with his single piece of the recipe, his information is useless by itself.
The simplest sharing scheme splits a message between two people. Here’s a
protocol in which Trent can split a message between Alice and Bob:
(1) Trent generates a random-bit string, R, the same length as the
message, M.
(2) Trent XORs M with R to generate S.
M • R = S
(3) Trent gives R to Alice and S to Bob.
To reconstruct the message, Alice and Bob have only one step to do:
(4) Alice and Bob XOR their pieces together to reconstruct the
message:
R • S = M










///////////////////////////////////////////////////////////////////////////////
Chapter 7

7.1 Symmetric Key Length

The security of a symmetric cryptosystem is a function of two things: the
strength of the algorithm and the length of the key.



Asumiendo que se tiene una fuerza del algoritmo perfecta, la única forma de quebrar el criptosistema sería mediante
un ataque de fuerza bruta el cual es un tipo de known-plaintext attack donde sería solamente necesario unos 64 bits
de texto plano y texto cifrado para ejecutarlo. Ahora tomemos en consideración el tamaño de la llave, si se tuviera 
una llave de 2^8 bits el atacante solamente tendría que probar 256 posibilidades para obtener la llave lo que le tomaría
a un atacante unos cuantos segundos en una computadora, en cambio para 2^64 bits tenemos 1.8446744^19 posibles llaves 
que el atacante debe probar lo cual tomaría con los recursos computacionales de una supercomputadora alrededor de 585,000 años. 
Y para una longitud de llave de 2048, a million million-attempts-per-second computers working in parallel will spend
10597 years finding the key.

Two parameters determine the speed of a brute-force attack: the number of keys to be tested and the speed of each test
since we are looking for key lengths that are millions of times more difficult to crack than would be feasible, 
small differences due to test speed are irrelevant.


// TAL VEZ SE PUEDE AGREGAR EN DONDE SE EXPLICAN LOS ALGORITMOS DE LLAVE PUBLICA
today’s dominant public-key encryption algorithms are based on
the difficulty of factoring large numbers that are the product of two large
primes. (Other algorithms are based on something called the Discrete
Logarithm Problem, but for the moment assume the same discussion applies.)





// DEMASIADO IMPORTANTE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
You can, but remember that you pay a price in computation time as your keys get longer. You want a key long enough to be
secure, but short enough to be computationally usable.





//
Public keys are often used
to secure things of great value for a long time: the bank’s master key for a
digital cash system, the key the government uses to certify its passports, or a
notary public’s digital signature key. It probably isn’t worth the effort to spend
months of computing time to break an individual’s private key, but if you can
print your own money with a broken key the idea becomes more attractive




//7.3 Comparing Symmetric and Public-Key Key
Length
A system is going to be attacked at its weakest point. If you are designing a
system that uses both symmetric and public-key cryptography, the key lengths
for each type of cryptography should be chosen so that it is equally difficult to
attack the system via each mechanism. It makes no sense to use a symmetric
algorithm with a 128-bit key together with a public-key algorithm with a
386-bit key, just as it makes no sense to use a symmetric algorithm with a
56-bit key together with a public-key algorithm with a 1024-bit key.
Table 7.9 lists public-key modulus lengths whose factoring difficulty roughly
equals the difficulty of a brute-force attack for popular symmetric key lengths.
This table says that if you are concerned enough about security to choose a
symmetric algorithm with a 112-bit key, you should choose a modulus length
for your public-key algorithm of about 1792 bits. In general, though, you
should choose a public-key length that is more secure than your
symmetric-key length. Public keys generally stay around longer, and are used
to protect more information.



// Key management

Se puede tener un algoritmo extremadamente robusto, veloz y con un tamaño de llave perfecto, pero si un atacante puede obtener
la llave, ya sea chantajeando, interceptando, extorsionando o pagando por la misma se pierde todo. De ahí la gran importancia
de como manejar las llaves.

Al ser esto tan importante existen ciertas maneras de generar llaves:
\begin{itemize}
\item Ingresada por el usuario: El usuario elige una llave y esa es la que se va a utilizar. Este método es sumamente inseguro
debido a que gran cantidad de contraseñas se repiten, o son datos personales del usuario como su número de celular o similares.
Por tanto se pueden realizar \textit{ataques de diccionario} donde las primeras llaves que se prueban son las mencionadas
anteriormente.

\item Random keys: Es un muy buen método para generar llaves, consiste en utilizar un programa que genere la llave, es ventajoso
ya que es robusto ante ataques de diccionario pero presenta el problema que la llave es difícil de recordar y posiblemente se olvide.

\item pass phrases: Es una combinación de ambos, el usuario escribe una contraseña fácil de recordar y después
hace uso de un one-way has function para convertir esta llave en una llave random de tamaño arbitrario.
\end{itemize}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Capitulo 9








////////////////////////////////////////////////////////
posibles algoritmos

block cipher:

RC5
IDEA
GOST
CAST





























